version: '3.8'

volumes:
  db_data:
  pgadmin:

networks:
  appNetwork:
    driver: bridge
  
services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - 8080:8080
    restart: on-failure
    networks:
      - appNetwork
    environment:
      - BACKEND_HOST=${BACKEND_HOST}
      - NESTJS_PORT=${NESTJS_PORT}

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - postgres
    ports:
      - 3030:3030
    restart: on-failure
    networks:
      - appNetwork
    environment:
      - PGREST_PORT=${PGREST_PORT}
      - PGREST_HOST=${PGREST_HOST}
      - HOST_URL=http://${CALLBACK_HOST}:${VUE_PORT}
      - JSON_WEB_TOKEN_SECRET=${JSON_WEB_TOKEN_SECRET}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - CALLBACK_URL=http://${CALLBACK_HOST}:${NESTJS_PORT}/${CALLBACK_PATH}
      - SESSION_SECRET=${SESSION_SECRET}
      - NESTJS_PORT=${NESTJS_PORT}

  socketio:
    container_name: socketio
    build:
      context: ./socketio
      dockerfile: Dockerfile
    depends_on:
      - pgrest
    ports:
      - "${SOCKETIO_CHAT_PORT}:${SOCKETIO_CHAT_PORT}"
      - "${SOCKETIO_PONG_PORT}:${SOCKETIO_PONG_PORT}"
    restart: on-failure
    networks:
      - appNetwork
    environment:
      - JSON_WEB_TOKEN_SECRET=${JSON_WEB_TOKEN_SECRET}
      - PGREST_PORT=${PGREST_PORT}
      - PGREST_HOST=${PGREST_HOST}
      - SOCKETIO_CHAT_PORT=${SOCKETIO_CHAT_PORT}
      - SOCKETIO_PONG_PORT=${SOCKETIO_PONG_PORT}

  # https://hub.docker.com/_/postgres
  postgres:
    build:
      context: ./database/postgres
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER:      ${POSTGRES_USER}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
      POSTGRES_DB:        ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - appNetwork

  # https://hub.docker.com/r/dpage/pgadmin4/
  # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL:    ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_PORT:             ${PGADMIN_PORT}
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - appNetwork

  # https://hub.docker.com/r/postgrest/postgrest/
  # https://postgrest.org/en/stable/install.html#docker
  pgrest:
    container_name: pgrest
    image: postgrest/postgrest
    restart: always
    environment:
      PGRST_DB_URI:                   postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA:                public
      PGRST_DB_ANON_ROLE:             ${POSTGRES_USER} #In production this role should not be the same as the one used for the connection
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:${PGREST_PORT}
    ports:
      - "${PGREST_PORT}:3000"
    depends_on:
      - postgres
    networks:
      - appNetwork

  # https://hub.docker.com/r/swaggerapi/swagger-ui
  pgrest-swagger:
    container_name: pgrest-swagger
    image: swaggerapi/swagger-ui
    restart: always
    environment:
      API_URL: http://localhost:${PGREST_PORT}/
    ports:
      - "${SWAGGER_UI_PORT}:8080"
    depends_on:
      - pgrest
    networks:
      - appNetwork
